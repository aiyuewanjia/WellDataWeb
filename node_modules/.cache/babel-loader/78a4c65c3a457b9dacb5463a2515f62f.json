{"remainingRequest":"D:\\BaiduNetdiskWorkspace\\程序文件\\井室管理系统前端\\wellmanagement\\node_modules\\babel-loader\\lib\\index.js!D:\\BaiduNetdiskWorkspace\\程序文件\\井室管理系统前端\\wellmanagement\\node_modules\\vue-loader-v16\\dist\\templateLoader.js??ref--6!D:\\BaiduNetdiskWorkspace\\程序文件\\井室管理系统前端\\wellmanagement\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\BaiduNetdiskWorkspace\\程序文件\\井室管理系统前端\\wellmanagement\\node_modules\\vue-loader-v16\\dist\\index.js??ref--0-1!D:\\BaiduNetdiskWorkspace\\程序文件\\井室管理系统前端\\wellmanagement\\node_modules\\@jiaminghi\\data-view\\lib\\components\\conicalColumnChart\\src\\main.vue?vue&type=template&id=377d8eea","dependencies":[{"path":"D:\\BaiduNetdiskWorkspace\\程序文件\\井室管理系统前端\\wellmanagement\\node_modules\\@jiaminghi\\data-view\\lib\\components\\conicalColumnChart\\src\\main.vue","mtime":1629615077992},{"path":"D:\\BaiduNetdiskWorkspace\\程序文件\\井室管理系统前端\\wellmanagement\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1628318231129},{"path":"D:\\BaiduNetdiskWorkspace\\程序文件\\井室管理系统前端\\wellmanagement\\node_modules\\babel-loader\\lib\\index.js","mtime":1628318231494},{"path":"D:\\BaiduNetdiskWorkspace\\程序文件\\井室管理系统前端\\wellmanagement\\node_modules\\vue-loader-v16\\dist\\templateLoader.js","mtime":1628318231823},{"path":"D:\\BaiduNetdiskWorkspace\\程序文件\\井室管理系统前端\\wellmanagement\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1628318231129},{"path":"D:\\BaiduNetdiskWorkspace\\程序文件\\井室管理系统前端\\wellmanagement\\node_modules\\vue-loader-v16\\dist\\index.js","mtime":1628318231605}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuZnVuY3Rpb24ubmFtZS5qcyI7CmltcG9ydCB7IHJlbmRlckxpc3QgYXMgX3JlbmRlckxpc3QsIEZyYWdtZW50IGFzIF9GcmFnbWVudCwgb3BlbkJsb2NrIGFzIF9vcGVuQmxvY2ssIGNyZWF0ZUJsb2NrIGFzIF9jcmVhdGVCbG9jaywgY3JlYXRlVk5vZGUgYXMgX2NyZWF0ZVZOb2RlLCB0b0Rpc3BsYXlTdHJpbmcgYXMgX3RvRGlzcGxheVN0cmluZywgY3JlYXRlQ29tbWVudFZOb2RlIGFzIF9jcmVhdGVDb21tZW50Vk5vZGUgfSBmcm9tICJ2dWUiOwpleHBvcnQgZnVuY3Rpb24gcmVuZGVyKF9jdHgsIF9jYWNoZSwgJHByb3BzLCAkc2V0dXAsICRkYXRhLCAkb3B0aW9ucykgewogIHJldHVybiBfb3BlbkJsb2NrKCksIF9jcmVhdGVCbG9jaygiZGl2IiwgewogICAgY2xhc3M6ICJkdi1jb25pY2FsLWNvbHVtbi1jaGFydCIsCiAgICByZWY6ICRkYXRhLnJlZgogIH0sIFsoX29wZW5CbG9jaygpLCBfY3JlYXRlQmxvY2soInN2ZyIsIHsKICAgIHdpZHRoOiBfY3R4LndpZHRoLAogICAgaGVpZ2h0OiBfY3R4LmhlaWdodAogIH0sIFsoX29wZW5CbG9jayh0cnVlKSwgX2NyZWF0ZUJsb2NrKF9GcmFnbWVudCwgbnVsbCwgX3JlbmRlckxpc3QoJGRhdGEuY29sdW1uLCBmdW5jdGlvbiAoaXRlbSwgaSkgewogICAgcmV0dXJuIF9vcGVuQmxvY2soKSwgX2NyZWF0ZUJsb2NrKCJnIiwgewogICAgICBrZXk6IGkKICAgIH0sIFtfY3JlYXRlVk5vZGUoInBhdGgiLCB7CiAgICAgIGQ6IGl0ZW0uZCwKICAgICAgZmlsbDogJGRhdGEubWVyZ2VkQ29uZmlnLmNvbHVtbkNvbG9yCiAgICB9LCBudWxsLCA4CiAgICAvKiBQUk9QUyAqLwogICAgLCBbImQiLCAiZmlsbCJdKSwgX2NyZWF0ZVZOb2RlKCJ0ZXh0IiwgewogICAgICBzdHlsZTogImZvbnRTaXplOiIuY29uY2F0KCRkYXRhLm1lcmdlZENvbmZpZy5mb250U2l6ZSwgInB4IiksCiAgICAgIGZpbGw6ICRkYXRhLm1lcmdlZENvbmZpZy50ZXh0Q29sb3IsCiAgICAgIHg6IGl0ZW0ueCwKICAgICAgeTogX2N0eC5oZWlnaHQgLSA0CiAgICB9LCBfdG9EaXNwbGF5U3RyaW5nKGl0ZW0ubmFtZSksIDEzCiAgICAvKiBURVhULCBTVFlMRSwgUFJPUFMgKi8KICAgICwgWyJmaWxsIiwgIngiLCAieSJdKSwgJGRhdGEubWVyZ2VkQ29uZmlnLmltZy5sZW5ndGggPyAoX29wZW5CbG9jaygpLCBfY3JlYXRlQmxvY2soImltYWdlIiwgewogICAgICBrZXk6IDAsCiAgICAgICJ4bGluazpocmVmIjogJGRhdGEubWVyZ2VkQ29uZmlnLmltZ1tpICUgJGRhdGEubWVyZ2VkQ29uZmlnLmltZy5sZW5ndGhdLAogICAgICB3aWR0aDogJGRhdGEubWVyZ2VkQ29uZmlnLmltZ1NpZGVMZW5ndGgsCiAgICAgIGhlaWdodDogJGRhdGEubWVyZ2VkQ29uZmlnLmltZ1NpZGVMZW5ndGgsCiAgICAgIHg6IGl0ZW0ueCAtICRkYXRhLm1lcmdlZENvbmZpZy5pbWdTaWRlTGVuZ3RoIC8gMiwKICAgICAgeTogaXRlbS55IC0gJGRhdGEubWVyZ2VkQ29uZmlnLmltZ1NpZGVMZW5ndGgKICAgIH0sIG51bGwsIDgKICAgIC8qIFBST1BTICovCiAgICAsIFsieGxpbms6aHJlZiIsICJ3aWR0aCIsICJoZWlnaHQiLCAieCIsICJ5Il0pKSA6IF9jcmVhdGVDb21tZW50Vk5vZGUoInYtaWYiLCB0cnVlKSwgJGRhdGEubWVyZ2VkQ29uZmlnLnNob3dWYWx1ZSA/IChfb3BlbkJsb2NrKCksIF9jcmVhdGVCbG9jaygidGV4dCIsIHsKICAgICAga2V5OiAxLAogICAgICBzdHlsZTogImZvbnRTaXplOiIuY29uY2F0KCRkYXRhLm1lcmdlZENvbmZpZy5mb250U2l6ZSwgInB4IiksCiAgICAgIGZpbGw6ICRkYXRhLm1lcmdlZENvbmZpZy50ZXh0Q29sb3IsCiAgICAgIHg6IGl0ZW0ueCwKICAgICAgeTogaXRlbS50ZXh0WQogICAgfSwgX3RvRGlzcGxheVN0cmluZyhpdGVtLnZhbHVlKSwgMTMKICAgIC8qIFRFWFQsIFNUWUxFLCBQUk9QUyAqLwogICAgLCBbImZpbGwiLCAieCIsICJ5Il0pKSA6IF9jcmVhdGVDb21tZW50Vk5vZGUoInYtaWYiLCB0cnVlKV0pOwogIH0pLCAxMjgKICAvKiBLRVlFRF9GUkFHTUVOVCAqLwogICkpXSwgOAogIC8qIFBST1BTICovCiAgLCBbIndpZHRoIiwgImhlaWdodCJdKSldLCA1MTIKICAvKiBORUVEX1BBVENIICovCiAgKTsKfQ=="},{"version":3,"sources":["D:\\BaiduNetdiskWorkspace\\程序文件\\井室管理系统前端\\wellmanagement\\node_modules\\@jiaminghi\\data-view\\lib\\components\\conicalColumnChart\\src\\main.vue"],"names":[],"mappings":";;;uBACE,YAAA,CAqCM,KArCN,EAqCM;AArCD,IAAA,KAAK,EAAC,yBAqCL;AArCgC,IAAA,GAAG,EAAE,KAAA,CAAA;AAqCrC,GArCN,E,gBACE,YAAA,CAmCM,KAnCN,EAmCM;AAnCA,IAAA,KAAK,EAAE,IAAA,CAAA,KAmCP;AAnCe,IAAA,MAAM,EAAE,IAAA,CAAA;AAmCvB,GAnCN,E,oBACE,YAAA,CAiCI,SAjCJ,EAiCI,IAjCJ,EAiCI,WAAA,CAhCkB,KAAA,CAAA,MAgClB,EAhCwB,UAAlB,IAAkB,EAAZ,CAAY,EAAX;yBADjB,YAAA,CAiCI,GAjCJ,EAiCI;AA/BD,MAAA,GAAG,EAAE;AA+BJ,KAjCJ,EAES,CAEP,YAAA,CAGE,MAHF,EAGE;AAFC,MAAA,CAAC,EAAE,IAAI,CAAC,CAET;AADC,MAAA,IAAI,EAAE,KAAA,CAAA,YAAA,CAAa;AACpB,KAHF,E,IAAA,E;;AAAA,M,aAAA,CAFO,EAMP,YAAA,CAOO,MAPP,EAOO;AANJ,MAAA,KAAK,qBAAc,KAAA,CAAA,YAAA,CAAa,QAA3B,OAMD;AALJ,MAAA,IAAI,EAAE,KAAA,CAAA,YAAA,CAAa,SAKf;AAJJ,MAAA,CAAC,EAAE,IAAI,CAAC,CAIJ;AAHJ,MAAA,CAAC,EAAE,IAAA,CAAA,MAAA,GAAM;AAGL,KAPP,E,iBAMK,IAAI,CAAC,I,CANV,EAMc;AAAA;AANd,MAMc,CAAA,MAAA,EAAA,GAAA,EAAA,GAAA,CANd,CANO,EAeC,KAAA,CAAA,YAAA,CAAa,GAAb,CAAiB,M,kBADzB,YAAA,CAOE,OAPF,EAOE;YAAA;AALC,oBAAY,KAAA,CAAA,YAAA,CAAa,GAAb,CAAiB,CAAC,GAAG,KAAA,CAAA,YAAA,CAAa,GAAb,CAAiB,MAAtC,CAKb;AAJC,MAAA,KAAK,EAAE,KAAA,CAAA,YAAA,CAAa,aAIrB;AAHC,MAAA,MAAM,EAAE,KAAA,CAAA,YAAA,CAAa,aAGtB;AAFC,MAAA,CAAC,EAAE,IAAI,CAAC,CAAL,GAAS,KAAA,CAAA,YAAA,CAAa,aAAb,GAA0B,CAEvC;AADC,MAAA,CAAC,EAAE,IAAI,CAAC,CAAL,GAAS,KAAA,CAAA,YAAA,CAAa;AAC1B,KAPF,E,IAAA,E;;AAAA,M,2CAAA,C,qCAdO,EAuBC,KAAA,CAAA,YAAA,CAAa,S,kBADrB,YAAA,CAQO,MARP,EAQO;YAAA;AANJ,MAAA,KAAK,qBAAc,KAAA,CAAA,YAAA,CAAa,QAA3B,OAMD;AALJ,MAAA,IAAI,EAAE,KAAA,CAAA,YAAA,CAAa,SAKf;AAJJ,MAAA,CAAC,EAAE,IAAI,CAAC,CAIJ;AAHJ,MAAA,CAAC,EAAE,IAAI,CAAC;AAGJ,KARP,E,iBAOK,IAAI,CAAC,K,CAPV,EAOe;AAAA;AAPf,MAOe,CAAA,MAAA,EAAA,GAAA,EAAA,GAAA,CAPf,C,qCAtBO,CAFT,C;GAiCI,CAjCJ,E;;AAAA,G,EADF,E;;AAAA,I,mBAAA,C,EADF,E;;AAAA,G","sourcesContent":["<template>\n  <div class=\"dv-conical-column-chart\" :ref=\"ref\">\n    <svg :width=\"width\" :height=\"height\">\n      <g\n        v-for=\"(item, i) in column\"\n        :key=\"i\"\n      >\n        <path\n          :d=\"item.d\"\n          :fill=\"mergedConfig.columnColor\"\n        />\n        <text\n          :style=\"`fontSize:${mergedConfig.fontSize}px`\"\n          :fill=\"mergedConfig.textColor\"\n          :x=\"item.x\"\n          :y=\"height - 4\"\n        >\n          {{ item.name }}\n        </text>\n        <image\n          v-if=\"mergedConfig.img.length\"\n          :xlink:href=\"mergedConfig.img[i % mergedConfig.img.length]\"\n          :width=\"mergedConfig.imgSideLength\"\n          :height=\"mergedConfig.imgSideLength\"\n          :x=\"item.x - mergedConfig.imgSideLength / 2\"\n          :y=\"item.y - mergedConfig.imgSideLength\"\n        />\n        <text\n          v-if=\"mergedConfig.showValue\"\n          :style=\"`fontSize:${mergedConfig.fontSize}px`\"\n          :fill=\"mergedConfig.textColor\"\n          :x=\"item.x\"\n          :y=\"item.textY\"\n        >\n          {{ item.value }}\n        </text>\n      </g>\n    </svg>\n  </div>\n</template>\n\n<script>\nimport autoResize from '../../../mixin/autoResize'\n\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index'\n\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util'\n\nexport default {\n  name: 'DvConicalColumnChart',\n  mixins: [autoResize],\n  props: {\n    config: {\n      type: Object,\n      default: () => ({})\n    }\n  },\n  data () {\n    return {\n      ref: 'conical-column-chart',\n\n      defaultConfig: {\n        /**\n         * @description Chart data\n         * @type {Array<Object>}\n         * @default data = []\n         */\n        data: [],\n        /**\n         * @description Chart img\n         * @type {Array<String>}\n         * @default img = []\n         */\n        img: [],\n        /**\n         * @description Chart font size\n         * @type {Number}\n         * @default fontSize = 12\n         */\n        fontSize: 12,\n        /**\n         * @description Img side length\n         * @type {Number}\n         * @default imgSideLength = 30\n         */\n        imgSideLength: 30,\n        /**\n         * @description Column color\n         * @type {String}\n         * @default columnColor = 'rgba(0, 194, 255, 0.4)'\n         */\n        columnColor: 'rgba(0, 194, 255, 0.4)',\n        /**\n         * @description Text color\n         * @type {String}\n         * @default textColor = '#fff'\n         */\n        textColor: '#fff',\n        /**\n         * @description Show value\n         * @type {Boolean}\n         * @default showValue = false\n         */\n        showValue: false\n      },\n\n      mergedConfig: null,\n\n      column: []\n    }\n  },\n  watch: {\n    config () {\n      const { calcData } = this\n\n      calcData()\n    }\n  },\n  methods: {\n    afterAutoResizeMixinInit () {\n      const { calcData } = this\n\n      calcData()\n    },\n    onResize () {\n      const { calcData } = this\n\n      calcData()\n    },\n    calcData () {\n      const { mergeConfig, initData, calcSVGPath } = this\n\n      mergeConfig()\n\n      initData()\n\n      calcSVGPath()\n    },\n    mergeConfig () {\n      const { defaultConfig, config } = this\n\n      this.mergedConfig = deepMerge(deepClone(defaultConfig, true), config || {})\n    },\n    initData () {\n      const { mergedConfig } = this\n      let { data } = mergedConfig\n\n      data = deepClone(data, true)\n\n      data.sort(({ value: a }, { value: b }) => {\n        if (a > b) return -1\n        if (a < b) return 1\n        if (a === b) return 0\n      })\n\n      const max = data[0] ? data[0].value : 10\n\n      data = data.map(item => ({\n        ...item,\n        percent: item.value / max\n      }))\n\n      mergedConfig.data = data\n    },\n    calcSVGPath () {\n      const { mergedConfig, width, height } = this\n\n      const { imgSideLength, fontSize, data } = mergedConfig\n\n      const itemNum = data.length\n      const gap = width / (itemNum + 1)\n\n      const useAbleHeight = height - imgSideLength - fontSize - 5\n      const svgBottom = height - fontSize - 5\n\n      this.column = data.map((item, i) => {\n        const { percent } = item\n\n        const middleXPos = gap * (i + 1)\n        const leftXPos = gap * i\n        const rightXpos = gap * (i + 2)\n\n        const middleYPos = svgBottom - useAbleHeight * percent\n        const controlYPos = useAbleHeight * percent * 0.6 + middleYPos\n\n        const d = `\n          M${leftXPos}, ${svgBottom}\n          Q${middleXPos}, ${controlYPos} ${middleXPos},${middleYPos}\n          M${middleXPos},${middleYPos}\n          Q${middleXPos}, ${controlYPos} ${rightXpos},${svgBottom}\n          L${leftXPos}, ${svgBottom}\n          Z\n        `\n\n        const textY = (svgBottom + middleYPos) / 2 + fontSize / 2\n\n        return {\n          ...item,\n          d,\n          x: middleXPos,\n          y: middleYPos,\n          textY\n        }\n      })\n    }\n  }\n}\n</script>"],"sourceRoot":""}]}
{"remainingRequest":"/Users/wenhaoli/VscodeProject/井室管理系统前端/wellmanagement/node_modules/babel-loader/lib/index.js!/Users/wenhaoli/VscodeProject/井室管理系统前端/wellmanagement/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/wenhaoli/VscodeProject/井室管理系统前端/wellmanagement/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/index.js??ref--0-1!/Users/wenhaoli/VscodeProject/井室管理系统前端/wellmanagement/node_modules/@jiaminghi/data-view/lib/components/waterLevelPond/src/main.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/wenhaoli/VscodeProject/井室管理系统前端/wellmanagement/node_modules/@jiaminghi/data-view/lib/components/waterLevelPond/src/main.vue","mtime":499162500000},{"path":"/Users/wenhaoli/VscodeProject/井室管理系统前端/wellmanagement/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/wenhaoli/VscodeProject/井室管理系统前端/wellmanagement/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/wenhaoli/VscodeProject/井室管理系统前端/wellmanagement/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/wenhaoli/VscodeProject/井室管理系统前端/wellmanagement/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/wenhaoli/VscodeProject/井室管理系统前端/wellmanagement/node_modules/@jiaminghi/data-view/lib/components/waterLevelPond/src/main.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"dv-water-pond-level\">\n    <svg v-if=\"renderer\">\n      <defs>\n        <linearGradient :id=\"gradientId\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\n          <stop v-for=\"lc in svgBorderGradient\" :key=\"lc[0]\"\n            :offset=\"lc[0]\"\n            :stop-color=\"lc[1]\" />\n        </linearGradient>\n      </defs>\n\n      <text\n        v-if=\"renderer\"\n        :stroke=\"`url(#${gradientId})`\"\n        :fill=\"`url(#${gradientId})`\"\n        :x=\"renderer.area[0] / 2 + 8\"\n        :y=\"renderer.area[1] / 2 + 8\"\n      >\n        {{ details }}\n      </text>\n\n      <ellipse v-if=\"!shape || shape === 'round'\"\n        :cx=\"renderer.area[0] / 2 + 8\"\n        :cy=\"renderer.area[1] / 2 + 8\"\n        :rx=\"renderer.area[0] / 2 + 5\"\n        :ry=\"renderer.area[1] / 2 + 5\"\n        :stroke=\"`url(#${gradientId})`\" />\n\n      <rect v-else\n        x=\"2\" y=\"2\"\n        :rx=\"shape === 'roundRect' ? 10 : 0\"\n        :ry=\"shape === 'roundRect' ? 10 : 0\"\n        :width=\"renderer.area[0] + 12\"\n        :height=\"renderer.area[1] + 12\"\n        :stroke=\"`url(#${gradientId})`\" />\n    </svg>\n\n    <canvas ref=\"water-pond-level\" :style=\"`border-radius: ${radius};`\" />\n  </div>\n</template>\n\n<script>\nimport { uuid } from '../../../util/index'\n\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index'\n\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util'\n\nimport CRender from '@jiaminghi/c-render'\n\nexport default {\n  name: 'DvWaterLevelPond',\n  props: {\n    config: Object,\n    default: () => ({})\n  },\n  data () {\n    const id = uuid()\n    return {\n      gradientId: `water-level-pond-${id}`,\n\n      defaultConfig: {\n        /**\n         * @description Data\n         * @type {Array<Number>}\n         * @default data = []\n         * @example data = [60, 40]\n         */\n        data: [],\n        /**\n         * @description Shape of wanter level pond\n         * @type {String}\n         * @default shape = 'rect'\n         * @example shape = 'rect' | 'roundRect' | 'round'\n         */\n        shape: 'rect',\n        /**\n         * @description Water wave number\n         * @type {Number}\n         * @default waveNum = 3\n         */\n        waveNum: 3,\n        /**\n         * @description Water wave height (px)\n         * @type {Number}\n         * @default waveHeight = 40\n         */\n        waveHeight: 40,\n        /**\n         * @description Wave opacity\n         * @type {Number}\n         * @default waveOpacity = 0.4\n         */\n        waveOpacity: 0.4,\n        /**\n         * @description Colors (hex|rgb|rgba|color keywords)\n         * @type {Array<String>}\n         * @default colors = ['#00BAFF', '#3DE7C9']\n         * @example colors = ['#000', 'rgb(0, 0, 0)', 'rgba(0, 0, 0, 1)', 'red']\n         */\n        colors: ['#3DE7C9', '#00BAFF'],\n        /**\n         * @description Formatter\n         * @type {String}\n         * @default formatter = '{value}%'\n         */\n        formatter: '{value}%'\n      },\n\n      mergedConfig: {},\n\n      renderer: null,\n\n      svgBorderGradient: [],\n\n      details: '',\n\n      waves: [],\n\n      animation: false\n    }\n  },\n  computed: {\n    radius () {\n      const { shape } = this.mergedConfig\n\n      if (shape === 'round') return '50%'\n\n      if (shape === 'rect') return '0'\n\n      if (shape === 'roundRect') return '10px'\n\n      return '0'\n    },\n    shape () {\n      const { shape } = this.mergedConfig\n\n      if (!shape) return 'rect'\n\n      return shape\n    }\n  },\n  watch: {\n    config () {\n      const { calcData, renderer } = this\n\n      renderer.delAllGraph()\n\n      this.waves = []\n\n      setTimeout(calcData, 0)\n    }\n  },\n  methods: {\n    init () {\n      const { initRender, config, calcData } = this\n\n      initRender()\n\n      if (!config) return\n\n      calcData()\n    },\n    initRender () {\n      const { $refs } = this\n\n      this.renderer = new CRender($refs['water-pond-level'])\n    },\n    calcData () {\n      const { mergeConfig, calcSvgBorderGradient, calcDetails } = this\n\n      mergeConfig()\n\n      calcSvgBorderGradient()\n\n      calcDetails()\n\n      const { addWave, animationWave } = this\n\n      addWave()\n\n      animationWave()\n    },\n    mergeConfig () {\n      const { config, defaultConfig } = this\n\n      this.mergedConfig = deepMerge(deepClone(defaultConfig, true), config)\n    },\n    calcSvgBorderGradient () {\n      const { colors } = this.mergedConfig\n\n      const colorNum = colors.length\n\n      const colorOffsetGap = 100 / (colorNum - 1)\n\n      this.svgBorderGradient = colors.map((c, i) => [colorOffsetGap * i, c])\n    },\n    calcDetails () {\n      const { data, formatter } = this.mergedConfig\n\n      if (!data.length) {\n        this.details = ''\n\n        return\n      }\n\n      const maxValue = Math.max(...data)\n\n      this.details = formatter.replace('{value}', maxValue)\n    },\n    addWave () {\n      const { renderer, getWaveShapes, getWaveStyle, drawed } = this\n\n      const shapes = getWaveShapes()\n      const style = getWaveStyle()\n\n      this.waves = shapes.map(shape => renderer.add({\n        name: 'smoothline',\n        animationFrame: 300,\n        shape,\n        style,\n        drawed\n      }))\n    },\n    getWaveShapes () {\n      const { mergedConfig, renderer, mergeOffset } = this\n\n      const { waveNum, waveHeight, data } = mergedConfig\n\n      const [w, h] = renderer.area\n\n      const pointsNum = waveNum * 4 + 4\n\n      const pointXGap = w / waveNum / 2\n\n      return data.map(v => {\n        let points = new Array(pointsNum).fill(0).map((foo, j) => {\n          const x = w - pointXGap * j\n\n          const startY = (1 - v / 100) * h\n\n          const y = j % 2 === 0 ? startY : startY - waveHeight\n\n          return [x, y]\n        })\n\n        points = points.map(p => mergeOffset(p, [pointXGap * 2, 0]))\n\n        return { points }\n      })\n    },\n    mergeOffset ([x, y], [ox, oy]) {\n      return [x + ox, y + oy]\n    },\n    getWaveStyle () {\n      const { renderer, mergedConfig } = this\n\n      const h = renderer.area[1]\n\n      return {\n        gradientColor: mergedConfig.colors,\n        gradientType: 'linear',\n        gradientParams: [0, 0, 0, h],\n        gradientWith: 'fill',\n        opacity: mergedConfig.waveOpacity,\n        translate: [0, 0]\n      }\n    },\n    drawed ({ shape: { points } }, { ctx, area }) {\n      const firstPoint = points[0]\n      const lastPoint = points.slice(-1)[0]\n\n      const h = area[1]\n\n      ctx.lineTo(lastPoint[0], h)\n      ctx.lineTo(firstPoint[0], h)\n\n      ctx.closePath()\n\n      ctx.fill()\n    },\n    async animationWave (repeat = 1) {\n      const { waves, renderer, animation } = this\n\n      if (animation) return\n\n      this.animation = true\n\n      const w = renderer.area[0]\n\n      waves.forEach(graph => {\n        graph.attr('style', { translate: [0, 0] })\n\n        graph.animation('style', {\n          translate: [w, 0]\n        }, true)\n      })\n\n      await renderer.launchAnimation()\n\n      this.animation = false\n\n      if (!renderer.graphs.length) return\n\n      this.animationWave(repeat + 1)\n    }\n  },\n  mounted () {\n    const { init } = this\n\n    init()\n  },\n  beforeDestroy () {\n    const { renderer } = this\n\n    renderer.delAllGraph()\n\n    this.waves = []\n  }\n}\n</script>"],"sourceRoot":""}]}
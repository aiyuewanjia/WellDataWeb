{"remainingRequest":"D:\\BaiduNetdiskWorkspace\\程序文件\\井室管理系统前端\\wellmanagement\\node_modules\\thread-loader\\dist\\cjs.js!D:\\BaiduNetdiskWorkspace\\程序文件\\井室管理系统前端\\wellmanagement\\node_modules\\babel-loader\\lib\\index.js!D:\\BaiduNetdiskWorkspace\\程序文件\\井室管理系统前端\\wellmanagement\\node_modules\\vue-loader-v16\\dist\\templateLoader.js??ref--6!D:\\BaiduNetdiskWorkspace\\程序文件\\井室管理系统前端\\wellmanagement\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\BaiduNetdiskWorkspace\\程序文件\\井室管理系统前端\\wellmanagement\\node_modules\\vue-loader-v16\\dist\\index.js??ref--0-1!D:\\BaiduNetdiskWorkspace\\程序文件\\井室管理系统前端\\wellmanagement\\node_modules\\@jiaminghi\\data-view\\lib\\components\\waterLevelPond\\src\\main.vue?vue&type=template&id=fde64310","dependencies":[{"path":"D:\\BaiduNetdiskWorkspace\\程序文件\\井室管理系统前端\\wellmanagement\\node_modules\\@jiaminghi\\data-view\\lib\\components\\waterLevelPond\\src\\main.vue","mtime":1629615078000},{"path":"D:\\BaiduNetdiskWorkspace\\程序文件\\井室管理系统前端\\wellmanagement\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1628318231129},{"path":"D:\\BaiduNetdiskWorkspace\\程序文件\\井室管理系统前端\\wellmanagement\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1628318231129},{"path":"D:\\BaiduNetdiskWorkspace\\程序文件\\井室管理系统前端\\wellmanagement\\node_modules\\babel-loader\\lib\\index.js","mtime":1628318231494},{"path":"D:\\BaiduNetdiskWorkspace\\程序文件\\井室管理系统前端\\wellmanagement\\node_modules\\vue-loader-v16\\dist\\templateLoader.js","mtime":1628318231823},{"path":"D:\\BaiduNetdiskWorkspace\\程序文件\\井室管理系统前端\\wellmanagement\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1628318231129},{"path":"D:\\BaiduNetdiskWorkspace\\程序文件\\井室管理系统前端\\wellmanagement\\node_modules\\vue-loader-v16\\dist\\index.js","mtime":1628318231605}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgcmVuZGVyTGlzdCBhcyBfcmVuZGVyTGlzdCwgRnJhZ21lbnQgYXMgX0ZyYWdtZW50LCBvcGVuQmxvY2sgYXMgX29wZW5CbG9jaywgY3JlYXRlQmxvY2sgYXMgX2NyZWF0ZUJsb2NrLCBjcmVhdGVWTm9kZSBhcyBfY3JlYXRlVk5vZGUsIHRvRGlzcGxheVN0cmluZyBhcyBfdG9EaXNwbGF5U3RyaW5nLCBjcmVhdGVDb21tZW50Vk5vZGUgYXMgX2NyZWF0ZUNvbW1lbnRWTm9kZSB9IGZyb20gInZ1ZSI7CnZhciBfaG9pc3RlZF8xID0gewogIGNsYXNzOiAiZHYtd2F0ZXItcG9uZC1sZXZlbCIKfTsKdmFyIF9ob2lzdGVkXzIgPSB7CiAga2V5OiAwCn07CmV4cG9ydCBmdW5jdGlvbiByZW5kZXIoX2N0eCwgX2NhY2hlLCAkcHJvcHMsICRzZXR1cCwgJGRhdGEsICRvcHRpb25zKSB7CiAgcmV0dXJuIF9vcGVuQmxvY2soKSwgX2NyZWF0ZUJsb2NrKCJkaXYiLCBfaG9pc3RlZF8xLCBbJGRhdGEucmVuZGVyZXIgPyAoX29wZW5CbG9jaygpLCBfY3JlYXRlQmxvY2soInN2ZyIsIF9ob2lzdGVkXzIsIFtfY3JlYXRlVk5vZGUoImRlZnMiLCBudWxsLCBbX2NyZWF0ZVZOb2RlKCJsaW5lYXJHcmFkaWVudCIsIHsKICAgIGlkOiAkZGF0YS5ncmFkaWVudElkLAogICAgeDE6ICIwJSIsCiAgICB5MTogIjAlIiwKICAgIHgyOiAiMCUiLAogICAgeTI6ICIxMDAlIgogIH0sIFsoX29wZW5CbG9jayh0cnVlKSwgX2NyZWF0ZUJsb2NrKF9GcmFnbWVudCwgbnVsbCwgX3JlbmRlckxpc3QoJGRhdGEuc3ZnQm9yZGVyR3JhZGllbnQsIGZ1bmN0aW9uIChsYykgewogICAgcmV0dXJuIF9vcGVuQmxvY2soKSwgX2NyZWF0ZUJsb2NrKCJzdG9wIiwgewogICAgICBrZXk6IGxjWzBdLAogICAgICBvZmZzZXQ6IGxjWzBdLAogICAgICAic3RvcC1jb2xvciI6IGxjWzFdCiAgICB9LCBudWxsLCA4LCBbIm9mZnNldCIsICJzdG9wLWNvbG9yIl0pOwogIH0pLCAxMjgpKV0sIDgsIFsiaWQiXSldKSwgJGRhdGEucmVuZGVyZXIgPyAoX29wZW5CbG9jaygpLCBfY3JlYXRlQmxvY2soInRleHQiLCB7CiAgICBrZXk6IDAsCiAgICBzdHJva2U6ICJ1cmwoIyIuY29uY2F0KCRkYXRhLmdyYWRpZW50SWQsICIpIiksCiAgICBmaWxsOiAidXJsKCMiLmNvbmNhdCgkZGF0YS5ncmFkaWVudElkLCAiKSIpLAogICAgeDogJGRhdGEucmVuZGVyZXIuYXJlYVswXSAvIDIgKyA4LAogICAgeTogJGRhdGEucmVuZGVyZXIuYXJlYVsxXSAvIDIgKyA4CiAgfSwgX3RvRGlzcGxheVN0cmluZygkZGF0YS5kZXRhaWxzKSwgOSwgWyJzdHJva2UiLCAiZmlsbCIsICJ4IiwgInkiXSkpIDogX2NyZWF0ZUNvbW1lbnRWTm9kZSgiIiwgdHJ1ZSksICEkb3B0aW9ucy5zaGFwZSB8fCAkb3B0aW9ucy5zaGFwZSA9PT0gJ3JvdW5kJyA/IChfb3BlbkJsb2NrKCksIF9jcmVhdGVCbG9jaygiZWxsaXBzZSIsIHsKICAgIGtleTogMSwKICAgIGN4OiAkZGF0YS5yZW5kZXJlci5hcmVhWzBdIC8gMiArIDgsCiAgICBjeTogJGRhdGEucmVuZGVyZXIuYXJlYVsxXSAvIDIgKyA4LAogICAgcng6ICRkYXRhLnJlbmRlcmVyLmFyZWFbMF0gLyAyICsgNSwKICAgIHJ5OiAkZGF0YS5yZW5kZXJlci5hcmVhWzFdIC8gMiArIDUsCiAgICBzdHJva2U6ICJ1cmwoIyIuY29uY2F0KCRkYXRhLmdyYWRpZW50SWQsICIpIikKICB9LCBudWxsLCA4LCBbImN4IiwgImN5IiwgInJ4IiwgInJ5IiwgInN0cm9rZSJdKSkgOiAoX29wZW5CbG9jaygpLCBfY3JlYXRlQmxvY2soInJlY3QiLCB7CiAgICBrZXk6IDIsCiAgICB4OiAiMiIsCiAgICB5OiAiMiIsCiAgICByeDogJG9wdGlvbnMuc2hhcGUgPT09ICdyb3VuZFJlY3QnID8gMTAgOiAwLAogICAgcnk6ICRvcHRpb25zLnNoYXBlID09PSAncm91bmRSZWN0JyA/IDEwIDogMCwKICAgIHdpZHRoOiAkZGF0YS5yZW5kZXJlci5hcmVhWzBdICsgMTIsCiAgICBoZWlnaHQ6ICRkYXRhLnJlbmRlcmVyLmFyZWFbMV0gKyAxMiwKICAgIHN0cm9rZTogInVybCgjIi5jb25jYXQoJGRhdGEuZ3JhZGllbnRJZCwgIikiKQogIH0sIG51bGwsIDgsIFsicngiLCAicnkiLCAid2lkdGgiLCAiaGVpZ2h0IiwgInN0cm9rZSJdKSldKSkgOiBfY3JlYXRlQ29tbWVudFZOb2RlKCIiLCB0cnVlKSwgX2NyZWF0ZVZOb2RlKCJjYW52YXMiLCB7CiAgICByZWY6ICJ3YXRlci1wb25kLWxldmVsIiwKICAgIHN0eWxlOiAiYm9yZGVyLXJhZGl1czogIi5jb25jYXQoJG9wdGlvbnMucmFkaXVzLCAiOyIpCiAgfSwgbnVsbCwgNCldKTsKfQ=="},{"version":3,"sources":["D:\\BaiduNetdiskWorkspace\\程序文件\\井室管理系统前端\\wellmanagement\\node_modules\\@jiaminghi\\data-view\\lib\\components\\waterLevelPond\\src\\main.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"dv-water-pond-level\">\n    <svg v-if=\"renderer\">\n      <defs>\n        <linearGradient :id=\"gradientId\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\n          <stop v-for=\"lc in svgBorderGradient\" :key=\"lc[0]\"\n            :offset=\"lc[0]\"\n            :stop-color=\"lc[1]\" />\n        </linearGradient>\n      </defs>\n\n      <text\n        v-if=\"renderer\"\n        :stroke=\"`url(#${gradientId})`\"\n        :fill=\"`url(#${gradientId})`\"\n        :x=\"renderer.area[0] / 2 + 8\"\n        :y=\"renderer.area[1] / 2 + 8\"\n      >\n        {{ details }}\n      </text>\n\n      <ellipse v-if=\"!shape || shape === 'round'\"\n        :cx=\"renderer.area[0] / 2 + 8\"\n        :cy=\"renderer.area[1] / 2 + 8\"\n        :rx=\"renderer.area[0] / 2 + 5\"\n        :ry=\"renderer.area[1] / 2 + 5\"\n        :stroke=\"`url(#${gradientId})`\" />\n\n      <rect v-else\n        x=\"2\" y=\"2\"\n        :rx=\"shape === 'roundRect' ? 10 : 0\"\n        :ry=\"shape === 'roundRect' ? 10 : 0\"\n        :width=\"renderer.area[0] + 12\"\n        :height=\"renderer.area[1] + 12\"\n        :stroke=\"`url(#${gradientId})`\" />\n    </svg>\n\n    <canvas ref=\"water-pond-level\" :style=\"`border-radius: ${radius};`\" />\n  </div>\n</template>\n\n<script>\nimport { uuid } from '../../../util/index'\n\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index'\n\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util'\n\nimport CRender from '@jiaminghi/c-render'\n\nexport default {\n  name: 'DvWaterLevelPond',\n  props: {\n    config: Object,\n    default: () => ({})\n  },\n  data () {\n    const id = uuid()\n    return {\n      gradientId: `water-level-pond-${id}`,\n\n      defaultConfig: {\n        /**\n         * @description Data\n         * @type {Array<Number>}\n         * @default data = []\n         * @example data = [60, 40]\n         */\n        data: [],\n        /**\n         * @description Shape of wanter level pond\n         * @type {String}\n         * @default shape = 'rect'\n         * @example shape = 'rect' | 'roundRect' | 'round'\n         */\n        shape: 'rect',\n        /**\n         * @description Water wave number\n         * @type {Number}\n         * @default waveNum = 3\n         */\n        waveNum: 3,\n        /**\n         * @description Water wave height (px)\n         * @type {Number}\n         * @default waveHeight = 40\n         */\n        waveHeight: 40,\n        /**\n         * @description Wave opacity\n         * @type {Number}\n         * @default waveOpacity = 0.4\n         */\n        waveOpacity: 0.4,\n        /**\n         * @description Colors (hex|rgb|rgba|color keywords)\n         * @type {Array<String>}\n         * @default colors = ['#00BAFF', '#3DE7C9']\n         * @example colors = ['#000', 'rgb(0, 0, 0)', 'rgba(0, 0, 0, 1)', 'red']\n         */\n        colors: ['#3DE7C9', '#00BAFF'],\n        /**\n         * @description Formatter\n         * @type {String}\n         * @default formatter = '{value}%'\n         */\n        formatter: '{value}%'\n      },\n\n      mergedConfig: {},\n\n      renderer: null,\n\n      svgBorderGradient: [],\n\n      details: '',\n\n      waves: [],\n\n      animation: false\n    }\n  },\n  computed: {\n    radius () {\n      const { shape } = this.mergedConfig\n\n      if (shape === 'round') return '50%'\n\n      if (shape === 'rect') return '0'\n\n      if (shape === 'roundRect') return '10px'\n\n      return '0'\n    },\n    shape () {\n      const { shape } = this.mergedConfig\n\n      if (!shape) return 'rect'\n\n      return shape\n    }\n  },\n  watch: {\n    config () {\n      const { calcData, renderer } = this\n\n      renderer.delAllGraph()\n\n      this.waves = []\n\n      setTimeout(calcData, 0)\n    }\n  },\n  methods: {\n    init () {\n      const { initRender, config, calcData } = this\n\n      initRender()\n\n      if (!config) return\n\n      calcData()\n    },\n    initRender () {\n      const { $refs } = this\n\n      this.renderer = new CRender($refs['water-pond-level'])\n    },\n    calcData () {\n      const { mergeConfig, calcSvgBorderGradient, calcDetails } = this\n\n      mergeConfig()\n\n      calcSvgBorderGradient()\n\n      calcDetails()\n\n      const { addWave, animationWave } = this\n\n      addWave()\n\n      animationWave()\n    },\n    mergeConfig () {\n      const { config, defaultConfig } = this\n\n      this.mergedConfig = deepMerge(deepClone(defaultConfig, true), config)\n    },\n    calcSvgBorderGradient () {\n      const { colors } = this.mergedConfig\n\n      const colorNum = colors.length\n\n      const colorOffsetGap = 100 / (colorNum - 1)\n\n      this.svgBorderGradient = colors.map((c, i) => [colorOffsetGap * i, c])\n    },\n    calcDetails () {\n      const { data, formatter } = this.mergedConfig\n\n      if (!data.length) {\n        this.details = ''\n\n        return\n      }\n\n      const maxValue = Math.max(...data)\n\n      this.details = formatter.replace('{value}', maxValue)\n    },\n    addWave () {\n      const { renderer, getWaveShapes, getWaveStyle, drawed } = this\n\n      const shapes = getWaveShapes()\n      const style = getWaveStyle()\n\n      this.waves = shapes.map(shape => renderer.add({\n        name: 'smoothline',\n        animationFrame: 300,\n        shape,\n        style,\n        drawed\n      }))\n    },\n    getWaveShapes () {\n      const { mergedConfig, renderer, mergeOffset } = this\n\n      const { waveNum, waveHeight, data } = mergedConfig\n\n      const [w, h] = renderer.area\n\n      const pointsNum = waveNum * 4 + 4\n\n      const pointXGap = w / waveNum / 2\n\n      return data.map(v => {\n        let points = new Array(pointsNum).fill(0).map((foo, j) => {\n          const x = w - pointXGap * j\n\n          const startY = (1 - v / 100) * h\n\n          const y = j % 2 === 0 ? startY : startY - waveHeight\n\n          return [x, y]\n        })\n\n        points = points.map(p => mergeOffset(p, [pointXGap * 2, 0]))\n\n        return { points }\n      })\n    },\n    mergeOffset ([x, y], [ox, oy]) {\n      return [x + ox, y + oy]\n    },\n    getWaveStyle () {\n      const { renderer, mergedConfig } = this\n\n      const h = renderer.area[1]\n\n      return {\n        gradientColor: mergedConfig.colors,\n        gradientType: 'linear',\n        gradientParams: [0, 0, 0, h],\n        gradientWith: 'fill',\n        opacity: mergedConfig.waveOpacity,\n        translate: [0, 0]\n      }\n    },\n    drawed ({ shape: { points } }, { ctx, area }) {\n      const firstPoint = points[0]\n      const lastPoint = points.slice(-1)[0]\n\n      const h = area[1]\n\n      ctx.lineTo(lastPoint[0], h)\n      ctx.lineTo(firstPoint[0], h)\n\n      ctx.closePath()\n\n      ctx.fill()\n    },\n    async animationWave (repeat = 1) {\n      const { waves, renderer, animation } = this\n\n      if (animation) return\n\n      this.animation = true\n\n      const w = renderer.area[0]\n\n      waves.forEach(graph => {\n        graph.attr('style', { translate: [0, 0] })\n\n        graph.animation('style', {\n          translate: [w, 0]\n        }, true)\n      })\n\n      await renderer.launchAnimation()\n\n      this.animation = false\n\n      if (!renderer.graphs.length) return\n\n      this.animationWave(repeat + 1)\n    }\n  },\n  mounted () {\n    const { init } = this\n\n    init()\n  },\n  beforeDestroy () {\n    const { renderer } = this\n\n    renderer.delAllGraph()\n\n    this.waves = []\n  }\n}\n</script>"],"sourceRoot":""}]}
{"remainingRequest":"/Users/wenhaoli/VscodeProject/井室管理系统前端/wellmanagement/node_modules/babel-loader/lib/index.js!/Users/wenhaoli/VscodeProject/井室管理系统前端/wellmanagement/node_modules/vue-loader-v16/dist/templateLoader.js??ref--6!/Users/wenhaoli/VscodeProject/井室管理系统前端/wellmanagement/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/wenhaoli/VscodeProject/井室管理系统前端/wellmanagement/node_modules/vue-loader-v16/dist/index.js??ref--0-1!/Users/wenhaoli/VscodeProject/井室管理系统前端/wellmanagement/node_modules/@jiaminghi/data-view/lib/components/percentPond/src/main.vue?vue&type=template&id=7f2c2d51","dependencies":[{"path":"/Users/wenhaoli/VscodeProject/井室管理系统前端/wellmanagement/node_modules/@jiaminghi/data-view/lib/components/percentPond/src/main.vue","mtime":1629615077999},{"path":"/Users/wenhaoli/VscodeProject/井室管理系统前端/wellmanagement/node_modules/cache-loader/dist/cjs.js","mtime":1628318231129},{"path":"/Users/wenhaoli/VscodeProject/井室管理系统前端/wellmanagement/node_modules/babel-loader/lib/index.js","mtime":1628318231494},{"path":"/Users/wenhaoli/VscodeProject/井室管理系统前端/wellmanagement/node_modules/vue-loader-v16/dist/templateLoader.js","mtime":1628318231823},{"path":"/Users/wenhaoli/VscodeProject/井室管理系统前端/wellmanagement/node_modules/cache-loader/dist/cjs.js","mtime":1628318231129},{"path":"/Users/wenhaoli/VscodeProject/井室管理系统前端/wellmanagement/node_modules/vue-loader-v16/dist/index.js","mtime":1628318231605}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuam9pbi5qcyI7CmltcG9ydCB7IHJlbmRlckxpc3QgYXMgX3JlbmRlckxpc3QsIEZyYWdtZW50IGFzIF9GcmFnbWVudCwgb3BlbkJsb2NrIGFzIF9vcGVuQmxvY2ssIGNyZWF0ZUJsb2NrIGFzIF9jcmVhdGVCbG9jaywgY3JlYXRlVk5vZGUgYXMgX2NyZWF0ZVZOb2RlLCB0b0Rpc3BsYXlTdHJpbmcgYXMgX3RvRGlzcGxheVN0cmluZyB9IGZyb20gInZ1ZSI7CnZhciBfaG9pc3RlZF8xID0gewogIGNsYXNzOiAiZHYtcGVyY2VudC1wb25kIiwKICByZWY6ICJwZXJjZW50LXBvbmQiCn07CmV4cG9ydCBmdW5jdGlvbiByZW5kZXIoX2N0eCwgX2NhY2hlLCAkcHJvcHMsICRzZXR1cCwgJGRhdGEsICRvcHRpb25zKSB7CiAgcmV0dXJuIF9vcGVuQmxvY2soKSwgX2NyZWF0ZUJsb2NrKCJkaXYiLCBfaG9pc3RlZF8xLCBbKF9vcGVuQmxvY2soKSwgX2NyZWF0ZUJsb2NrKCJzdmciLCBudWxsLCBbX2NyZWF0ZVZOb2RlKCJkZWZzIiwgbnVsbCwgW19jcmVhdGVWTm9kZSgibGluZWFyR3JhZGllbnQiLCB7CiAgICBpZDogJGRhdGEuZ3JhZGllbnRJZDEsCiAgICB4MTogIjAlIiwKICAgIHkxOiAiMCUiLAogICAgeDI6ICIxMDAlIiwKICAgIHkyOiAiMCUiCiAgfSwgWyhfb3BlbkJsb2NrKHRydWUpLCBfY3JlYXRlQmxvY2soX0ZyYWdtZW50LCBudWxsLCBfcmVuZGVyTGlzdCgkb3B0aW9ucy5saW5lYXJHcmFkaWVudCwgZnVuY3Rpb24gKGxjKSB7CiAgICByZXR1cm4gX29wZW5CbG9jaygpLCBfY3JlYXRlQmxvY2soInN0b3AiLCB7CiAgICAgIGtleTogbGNbMF0sCiAgICAgIG9mZnNldDogIiIuY29uY2F0KGxjWzBdLCAiJSIpLAogICAgICAic3RvcC1jb2xvciI6IGxjWzFdCiAgICB9LCBudWxsLCA4CiAgICAvKiBQUk9QUyAqLwogICAgLCBbIm9mZnNldCIsICJzdG9wLWNvbG9yIl0pOwogIH0pLCAxMjgKICAvKiBLRVlFRF9GUkFHTUVOVCAqLwogICkpXSwgOAogIC8qIFBST1BTICovCiAgLCBbImlkIl0pLCBfY3JlYXRlVk5vZGUoImxpbmVhckdyYWRpZW50IiwgewogICAgaWQ6ICRkYXRhLmdyYWRpZW50SWQyLAogICAgeDE6ICIwJSIsCiAgICB5MTogIjAlIiwKICAgIHgyOiAkb3B0aW9ucy5ncmFkaWVudDJYUG9zLAogICAgeTI6ICIwJSIKICB9LCBbKF9vcGVuQmxvY2sodHJ1ZSksIF9jcmVhdGVCbG9jayhfRnJhZ21lbnQsIG51bGwsIF9yZW5kZXJMaXN0KCRvcHRpb25zLmxpbmVhckdyYWRpZW50LCBmdW5jdGlvbiAobGMpIHsKICAgIHJldHVybiBfb3BlbkJsb2NrKCksIF9jcmVhdGVCbG9jaygic3RvcCIsIHsKICAgICAga2V5OiBsY1swXSwKICAgICAgb2Zmc2V0OiAiIi5jb25jYXQobGNbMF0sICIlIiksCiAgICAgICJzdG9wLWNvbG9yIjogbGNbMV0KICAgIH0sIG51bGwsIDgKICAgIC8qIFBST1BTICovCiAgICAsIFsib2Zmc2V0IiwgInN0b3AtY29sb3IiXSk7CiAgfSksIDEyOAogIC8qIEtFWUVEX0ZSQUdNRU5UICovCiAgKSldLCA4CiAgLyogUFJPUFMgKi8KICAsIFsiaWQiLCAieDIiXSldKSwgX2NyZWF0ZVZOb2RlKCJyZWN0IiwgewogICAgeDogJGRhdGEubWVyZ2VkQ29uZmlnID8gJGRhdGEubWVyZ2VkQ29uZmlnLmJvcmRlcldpZHRoIC8gMiA6ICcwJywKICAgIHk6ICRkYXRhLm1lcmdlZENvbmZpZyA/ICRkYXRhLm1lcmdlZENvbmZpZy5ib3JkZXJXaWR0aCAvIDIgOiAnMCcsCiAgICByeDogJGRhdGEubWVyZ2VkQ29uZmlnID8gJGRhdGEubWVyZ2VkQ29uZmlnLmJvcmRlclJhZGl1cyA6ICcwJywKICAgIHJ5OiAkZGF0YS5tZXJnZWRDb25maWcgPyAkZGF0YS5tZXJnZWRDb25maWcuYm9yZGVyUmFkaXVzIDogJzAnLAogICAgZmlsbDogInRyYW5zcGFyZW50IiwKICAgICJzdHJva2Utd2lkdGgiOiAkZGF0YS5tZXJnZWRDb25maWcgPyAkZGF0YS5tZXJnZWRDb25maWcuYm9yZGVyV2lkdGggOiAnMCcsCiAgICBzdHJva2U6ICJ1cmwoIyIuY29uY2F0KCRkYXRhLmdyYWRpZW50SWQxLCAiKSIpLAogICAgd2lkdGg6ICRvcHRpb25zLnJlY3RXaWR0aCA+IDAgPyAkb3B0aW9ucy5yZWN0V2lkdGggOiAwLAogICAgaGVpZ2h0OiAkb3B0aW9ucy5yZWN0SGVpZ2h0ID4gMCA/ICRvcHRpb25zLnJlY3RIZWlnaHQgOiAwCiAgfSwgbnVsbCwgOAogIC8qIFBST1BTICovCiAgLCBbIngiLCAieSIsICJyeCIsICJyeSIsICJzdHJva2Utd2lkdGgiLCAic3Ryb2tlIiwgIndpZHRoIiwgImhlaWdodCJdKSwgX2NyZWF0ZVZOb2RlKCJwb2x5bGluZSIsIHsKICAgICJzdHJva2Utd2lkdGgiOiAkb3B0aW9ucy5wb2x5bGluZVdpZHRoLAogICAgInN0cm9rZS1kYXNoYXJyYXkiOiAkZGF0YS5tZXJnZWRDb25maWcgPyAkZGF0YS5tZXJnZWRDb25maWcubGluZURhc2guam9pbignLCcpIDogJzAnLAogICAgc3Ryb2tlOiAidXJsKCMiLmNvbmNhdCgkb3B0aW9ucy5wb2x5bGluZUdyYWRpZW50LCAiKSIpLAogICAgcG9pbnRzOiAkb3B0aW9ucy5wb2ludHMKICB9LCBudWxsLCA4CiAgLyogUFJPUFMgKi8KICAsIFsic3Ryb2tlLXdpZHRoIiwgInN0cm9rZS1kYXNoYXJyYXkiLCAic3Ryb2tlIiwgInBvaW50cyJdKSwgX2NyZWF0ZVZOb2RlKCJ0ZXh0IiwgewogICAgc3Ryb2tlOiAkZGF0YS5tZXJnZWRDb25maWcgPyAkZGF0YS5tZXJnZWRDb25maWcudGV4dENvbG9yIDogJyNmZmYnLAogICAgZmlsbDogJGRhdGEubWVyZ2VkQ29uZmlnID8gJGRhdGEubWVyZ2VkQ29uZmlnLnRleHRDb2xvciA6ICcjZmZmJywKICAgIHg6ICRkYXRhLndpZHRoIC8gMiwKICAgIHk6ICRkYXRhLmhlaWdodCAvIDIKICB9LCBfdG9EaXNwbGF5U3RyaW5nKCRvcHRpb25zLmRldGFpbHMpLCA5CiAgLyogVEVYVCwgUFJPUFMgKi8KICAsIFsic3Ryb2tlIiwgImZpbGwiLCAieCIsICJ5Il0pXSkpXSwgNTEyCiAgLyogTkVFRF9QQVRDSCAqLwogICk7Cn0="},{"version":3,"sources":["/Users/wenhaoli/VscodeProject/井室管理系统前端/wellmanagement/node_modules/@jiaminghi/data-view/lib/components/percentPond/src/main.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"dv-percent-pond\" ref=\"percent-pond\">\n    <svg>\n      <defs>\n        <linearGradient :id=\"gradientId1\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\">\n          <stop v-for=\"lc in linearGradient\" :key=\"lc[0]\"\n            :offset=\"`${lc[0]}%`\"\n            :stop-color=\"lc[1]\" />\n        </linearGradient>\n\n        <linearGradient :id=\"gradientId2\" x1=\"0%\" y1=\"0%\" :x2=\"gradient2XPos\" y2=\"0%\">\n          <stop v-for=\"lc in linearGradient\" :key=\"lc[0]\"\n            :offset=\"`${lc[0]}%`\"\n            :stop-color=\"lc[1]\" />\n        </linearGradient>\n      </defs>\n      <rect\n        :x=\"mergedConfig ? mergedConfig.borderWidth / 2 : '0'\"\n        :y=\"mergedConfig ? mergedConfig.borderWidth / 2 : '0'\"\n        :rx=\"mergedConfig ? mergedConfig.borderRadius : '0'\"\n        :ry=\"mergedConfig ? mergedConfig.borderRadius : '0'\"\n        fill=\"transparent\"\n        :stroke-width=\"mergedConfig ? mergedConfig.borderWidth : '0'\"\n        :stroke=\"`url(#${gradientId1})`\"\n        :width=\"rectWidth > 0 ? rectWidth : 0\"\n        :height=\"rectHeight > 0 ? rectHeight : 0\"\n      />\n      <polyline\n        :stroke-width=\"polylineWidth\"\n        :stroke-dasharray=\"mergedConfig ? mergedConfig.lineDash.join(',') : '0'\"\n        :stroke=\"`url(#${polylineGradient})`\"\n        :points=\"points\"\n      />\n      <text\n        :stroke=\"mergedConfig ? mergedConfig.textColor : '#fff'\"\n        :fill=\"mergedConfig ? mergedConfig.textColor : '#fff'\"\n        :x=\"width / 2\"\n        :y=\"height / 2\"\n      >\n        {{ details }}\n      </text>\n    </svg>\n  </div>\n</template>\n\n<script>\nimport { uuid } from '../../../util/index'\n\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index'\n\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util'\n\nexport default {\n  name: 'DvPercentPond',\n  props: {\n    config: {\n      type: Object,\n      default: () => ({})\n    }\n  },\n  data () {\n    const id = uuid()\n    return {\n      gradientId1: `percent-pond-gradientId1-${id}`,\n      gradientId2: `percent-pond-gradientId2-${id}`,\n\n      width: 0,\n      height: 0,\n\n      defaultConfig: {\n        /**\n         * @description Value\n         * @type {Number}\n         * @default value = 0\n         */\n        value: 0,\n        /**\n         * @description Colors (hex|rgb|rgba|color keywords)\n         * @type {Array<String>}\n         * @default colors = ['#00BAFF', '#3DE7C9']\n         * @example colors = ['#000', 'rgb(0, 0, 0)', 'rgba(0, 0, 0, 1)', 'red']\n         */\n        colors: ['#3DE7C9', '#00BAFF'],\n        /**\n         * @description Border width\n         * @type {Number}\n         * @default borderWidth = 3\n         */\n        borderWidth: 3,\n        /**\n         * @description Gap between border and pond\n         * @type {Number}\n         * @default borderGap = 3\n         */\n        borderGap: 3,\n        /**\n         * @description Line dash\n         * @type {Array<Number>}\n         * @default lineDash = [5, 1]\n         */\n        lineDash: [5, 1],\n        /**\n         * @description Text color\n         * @type {String}\n         * @default textColor = '#fff'\n         */\n        textColor: '#fff',\n        /**\n         * @description Border radius\n         * @type {Number}\n         * @default borderRadius = 5\n         */\n        borderRadius: 5,\n        /**\n         * @description Local Gradient\n         * @type {Boolean}\n         * @default localGradient = false\n         * @example localGradient = false | true\n         */\n        localGradient: false,\n        /**\n         * @description Formatter\n         * @type {String}\n         * @default formatter = '{value}%'\n         */\n        formatter: '{value}%'\n      },\n\n      mergedConfig: null\n    }\n  },\n  computed: {\n    rectWidth () {\n      const { mergedConfig, width } = this\n\n      if (!mergedConfig) return 0\n\n      const { borderWidth } = mergedConfig\n\n      return width - borderWidth\n    },\n    rectHeight () {\n      const { mergedConfig, height } = this\n\n      if (!mergedConfig) return 0\n\n      const { borderWidth } = mergedConfig\n\n      return height - borderWidth\n    },\n    points () {\n      const { mergedConfig, width, height } = this\n\n      const halfHeight = height / 2\n\n      if (!mergedConfig) return `0, ${halfHeight} 0, ${halfHeight}`\n\n      const { borderWidth, borderGap, value } = mergedConfig\n\n      const polylineLength = (width - (borderWidth + borderGap) * 2) / 100 * value\n\n      return `\n        ${borderWidth + borderGap}, ${halfHeight}\n        ${borderWidth + borderGap + polylineLength}, ${halfHeight + 0.001}\n      `\n    },\n    polylineWidth () {\n      const { mergedConfig, height } = this\n\n      if (!mergedConfig) return 0\n\n      const { borderWidth, borderGap } = mergedConfig\n\n      return height - (borderWidth + borderGap) * 2\n    },\n    linearGradient () {\n      const { mergedConfig } = this\n\n      if (!mergedConfig) return []\n\n      const { colors } = mergedConfig\n\n      const colorNum = colors.length\n\n      const colorOffsetGap = 100 / (colorNum - 1)\n\n      return colors.map((c, i) => [colorOffsetGap * i, c])\n    },\n    polylineGradient () {\n      const { gradientId1, gradientId2, mergedConfig } = this\n\n      if (!mergedConfig) return gradientId2\n\n      if (mergedConfig.localGradient) return gradientId1\n\n      return gradientId2\n    },\n    gradient2XPos () {\n      const { mergedConfig } = this\n\n      if (!mergedConfig) return '100%'\n\n      const { value } = mergedConfig\n\n      return `${200 - value}%`\n    },\n    details () {\n      const { mergedConfig } = this\n\n      if (!mergedConfig) return ''\n\n      const { value, formatter } = mergedConfig\n\n      return formatter.replace('{value}', value)\n    }\n  },\n  watch: {\n    config () {\n      const { mergeConfig } = this\n\n      mergeConfig()\n    }\n  },\n  methods: {\n    async init () {\n      const { initWH, config, mergeConfig } = this\n\n      await initWH()\n\n      if (!config) return\n\n      mergeConfig()\n    },\n    async initWH () {\n      const { $nextTick, $refs } = this\n\n      await $nextTick()\n\n      const { clientWidth, clientHeight } = $refs['percent-pond']\n\n      this.width = clientWidth\n      this.height = clientHeight\n    },\n    mergeConfig () {\n      const { config, defaultConfig } = this\n\n      this.mergedConfig = deepMerge(deepClone(defaultConfig, true), config || {})\n    }\n  },\n  mounted () {\n    const { init } = this\n\n    init()\n  }\n}\n</script>"],"sourceRoot":""}]}
{"remainingRequest":"/Users/wenhaoli/VscodeProject/井室管理系统前端/wellmanagement/node_modules/babel-loader/lib/index.js!/Users/wenhaoli/VscodeProject/井室管理系统前端/wellmanagement/node_modules/vue-loader-v16/dist/templateLoader.js??ref--6!/Users/wenhaoli/VscodeProject/井室管理系统前端/wellmanagement/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/wenhaoli/VscodeProject/井室管理系统前端/wellmanagement/node_modules/vue-loader-v16/dist/index.js??ref--0-1!/Users/wenhaoli/VscodeProject/井室管理系统前端/wellmanagement/node_modules/@jiaminghi/data-view/lib/components/scrollRankingBoard/src/main.vue?vue&type=template&id=2ddbc50e","dependencies":[{"path":"/Users/wenhaoli/VscodeProject/井室管理系统前端/wellmanagement/node_modules/@jiaminghi/data-view/lib/components/scrollRankingBoard/src/main.vue","mtime":1629615078000},{"path":"/Users/wenhaoli/VscodeProject/井室管理系统前端/wellmanagement/node_modules/cache-loader/dist/cjs.js","mtime":1628318231129},{"path":"/Users/wenhaoli/VscodeProject/井室管理系统前端/wellmanagement/node_modules/babel-loader/lib/index.js","mtime":1628318231494},{"path":"/Users/wenhaoli/VscodeProject/井室管理系统前端/wellmanagement/node_modules/vue-loader-v16/dist/templateLoader.js","mtime":1628318231823},{"path":"/Users/wenhaoli/VscodeProject/井室管理系统前端/wellmanagement/node_modules/cache-loader/dist/cjs.js","mtime":1628318231129},{"path":"/Users/wenhaoli/VscodeProject/井室管理系统前端/wellmanagement/node_modules/vue-loader-v16/dist/index.js","mtime":1628318231605}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnRvLXN0cmluZy5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnJlZ2V4cC50by1zdHJpbmcuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5mdW5jdGlvbi5uYW1lLmpzIjsKaW1wb3J0IHsgcmVuZGVyTGlzdCBhcyBfcmVuZGVyTGlzdCwgRnJhZ21lbnQgYXMgX0ZyYWdtZW50LCBvcGVuQmxvY2sgYXMgX29wZW5CbG9jaywgY3JlYXRlQmxvY2sgYXMgX2NyZWF0ZUJsb2NrLCB0b0Rpc3BsYXlTdHJpbmcgYXMgX3RvRGlzcGxheVN0cmluZywgY3JlYXRlVk5vZGUgYXMgX2NyZWF0ZVZOb2RlIH0gZnJvbSAidnVlIjsKdmFyIF9ob2lzdGVkXzEgPSB7CiAgY2xhc3M6ICJyYW5raW5nLWluZm8iCn07CnZhciBfaG9pc3RlZF8yID0gewogIGNsYXNzOiAicmFuayIKfTsKdmFyIF9ob2lzdGVkXzMgPSB7CiAgY2xhc3M6ICJyYW5raW5nLXZhbHVlIgp9Owp2YXIgX2hvaXN0ZWRfNCA9IHsKICBjbGFzczogInJhbmtpbmctY29sdW1uIgp9OwoKdmFyIF9ob2lzdGVkXzUgPSAvKiNfX1BVUkVfXyovX2NyZWF0ZVZOb2RlKCJkaXYiLCB7CiAgY2xhc3M6ICJzaGluZSIKfSwgbnVsbCwgLTEKLyogSE9JU1RFRCAqLwopOwoKZXhwb3J0IGZ1bmN0aW9uIHJlbmRlcihfY3R4LCBfY2FjaGUsICRwcm9wcywgJHNldHVwLCAkZGF0YSwgJG9wdGlvbnMpIHsKICByZXR1cm4gX29wZW5CbG9jaygpLCBfY3JlYXRlQmxvY2soImRpdiIsIHsKICAgIGNsYXNzOiAiZHYtc2Nyb2xsLXJhbmtpbmctYm9hcmQiLAogICAgcmVmOiAkZGF0YS5yZWYKICB9LCBbKF9vcGVuQmxvY2sodHJ1ZSksIF9jcmVhdGVCbG9jayhfRnJhZ21lbnQsIG51bGwsIF9yZW5kZXJMaXN0KCRkYXRhLnJvd3MsIGZ1bmN0aW9uIChpdGVtLCBpKSB7CiAgICByZXR1cm4gX29wZW5CbG9jaygpLCBfY3JlYXRlQmxvY2soImRpdiIsIHsKICAgICAgY2xhc3M6ICJyb3ctaXRlbSIsCiAgICAgIGtleTogaXRlbS50b1N0cmluZygpICsgaXRlbS5zY3JvbGwsCiAgICAgIHN0eWxlOiAiaGVpZ2h0OiAiLmNvbmNhdCgkZGF0YS5oZWlnaHRzW2ldLCAicHg7IikKICAgIH0sIFtfY3JlYXRlVk5vZGUoImRpdiIsIF9ob2lzdGVkXzEsIFtfY3JlYXRlVk5vZGUoImRpdiIsIF9ob2lzdGVkXzIsICJOby4iICsgX3RvRGlzcGxheVN0cmluZyhpdGVtLnJhbmtpbmcpLCAxCiAgICAvKiBURVhUICovCiAgICApLCBfY3JlYXRlVk5vZGUoImRpdiIsIHsKICAgICAgY2xhc3M6ICJpbmZvLW5hbWUiLAogICAgICBpbm5lckhUTUw6IGl0ZW0ubmFtZQogICAgfSwgbnVsbCwgOAogICAgLyogUFJPUFMgKi8KICAgICwgWyJpbm5lckhUTUwiXSksIF9jcmVhdGVWTm9kZSgiZGl2IiwgX2hvaXN0ZWRfMywgX3RvRGlzcGxheVN0cmluZygkZGF0YS5tZXJnZWRDb25maWcudmFsdWVGb3JtYXR0ZXIgPyAkZGF0YS5tZXJnZWRDb25maWcudmFsdWVGb3JtYXR0ZXIoaXRlbSkgOiBpdGVtLnZhbHVlICsgJGRhdGEubWVyZ2VkQ29uZmlnLnVuaXQpLCAxCiAgICAvKiBURVhUICovCiAgICApXSksIF9jcmVhdGVWTm9kZSgiZGl2IiwgX2hvaXN0ZWRfNCwgW19jcmVhdGVWTm9kZSgiZGl2IiwgewogICAgICBjbGFzczogImluc2lkZS1jb2x1bW4iLAogICAgICBzdHlsZTogIndpZHRoOiAiLmNvbmNhdChpdGVtLnBlcmNlbnQsICIlOyIpCiAgICB9LCBbX2hvaXN0ZWRfNV0sIDQKICAgIC8qIFNUWUxFICovCiAgICApXSldLCA0CiAgICAvKiBTVFlMRSAqLwogICAgKTsKICB9KSwgMTI4CiAgLyogS0VZRURfRlJBR01FTlQgKi8KICApKV0sIDUxMgogIC8qIE5FRURfUEFUQ0ggKi8KICApOwp9"},{"version":3,"sources":["/Users/wenhaoli/VscodeProject/井室管理系统前端/wellmanagement/node_modules/@jiaminghi/data-view/lib/components/scrollRankingBoard/src/main.vue"],"names":[],"mappings":";;;;;AAQW,EAAA,KAAK,EAAC;;;AACJ,EAAA,KAAK,EAAC;;;AAEN,EAAA,KAAK,EAAC;;;AAGR,EAAA,KAAK,EAAC;;;8BAKP,YAAA,CAAqB,KAArB,EAAqB;AAAhB,EAAA,KAAK,EAAC;AAAU,CAArB,EAAkB,IAAlB,EAAkB,CAAA;AAAA;AAAlB,C;;;uBAlBR,YAAA,CAsBM,KAtBN,EAsBM;AAtBD,IAAA,KAAK,EAAC,yBAsBL;AAtBgC,IAAA,GAAG,EAAE,KAAA,CAAA;AAsBrC,GAtBN,E,oBACE,YAAA,CAoBM,SApBN,EAoBM,IApBN,EAoBM,WAAA,CAlBgB,KAAA,CAAA,IAkBhB,EAlBoB,UAAhB,IAAgB,EAAV,CAAU,EAAT;yBAFjB,YAAA,CAoBM,KApBN,EAoBM;AAnBJ,MAAA,KAAK,EAAC,UAmBF;AAjBH,MAAA,GAAG,EAAE,IAAI,CAAC,QAAL,KAAkB,IAAI,CAAC,MAiBzB;AAhBH,MAAA,KAAK,oBAAa,KAAA,CAAA,OAAA,CAAQ,CAAR,CAAb;AAgBF,KApBN,E,CAME,YAAA,CAIM,KAJN,EAAA,UAAA,EAIM,CAHJ,YAAA,CAA6C,KAA7C,EAAA,UAAA,EAAkB,QAAG,gBAAA,CAAG,IAAI,CAAC,OAAR,CAArB,EAAoC;AAAA;AAApC,KAGI,EAFJ,YAAA,CAA4C,KAA5C,EAA4C;AAAvC,MAAA,KAAK,EAAC,WAAiC;AAArB,MAAA,SAAkB,EAAV,IAAI,CAAC;AAAQ,KAA5C,E,IAAA,E;;AAAA,M,aAAA,CAEI,EADJ,YAAA,CAAuI,KAAvI,EAAA,UAAA,EAAuI,gBAAA,CAAzG,KAAA,CAAA,YAAA,CAAa,cAAb,GAA8B,KAAA,CAAA,YAAA,CAAa,cAAb,CAA4B,IAA5B,CAA9B,GAAkE,IAAI,CAAC,KAAL,GAAa,KAAA,CAAA,YAAA,CAAa,IAAa,CAAvI,EAA8H;AAAA;AAA9H,KACI,CAJN,C,EAMA,YAAA,CAOM,KAPN,EAAA,UAAA,EAOM,CANJ,YAAA,CAKM,KALN,EAKM;AAJJ,MAAA,KAAK,EAAC,eAIF;AAHH,MAAA,KAAK,mBAAY,IAAI,CAAC,OAAjB;AAGF,KALN,E,CAIE,U,CAJF,E;;AAAA,KAMI,CAPN,C,CAZF,E;;AAAA,K;GAoBM,CApBN,E;;AAAA,G,EADF,E;;AAAA,G","sourcesContent":["<template>\n  <div class=\"dv-scroll-ranking-board\" :ref=\"ref\">\n    <div\n      class=\"row-item\"\n      v-for=\"(item, i) in rows\"\n      :key=\"item.toString() + item.scroll\"\n      :style=\"`height: ${heights[i]}px;`\"\n    >\n      <div class=\"ranking-info\">\n        <div class=\"rank\">No.{{ item.ranking }}</div>\n        <div class=\"info-name\" v-html=\"item.name\" />\n        <div class=\"ranking-value\">{{ mergedConfig.valueFormatter ? mergedConfig.valueFormatter(item) : item.value + mergedConfig.unit }}</div>\n      </div>\n\n      <div class=\"ranking-column\">\n        <div\n          class=\"inside-column\"\n          :style=\"`width: ${item.percent}%;`\"\n        >\n          <div class=\"shine\" />\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport autoResize from '../../../mixin/autoResize'\n\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index'\n\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util'\n\nexport default {\n  name: 'DvScrollRankingBoard',\n  mixins: [autoResize],\n  props: {\n    config: {\n      type: Object,\n      default: () => ({})\n    }\n  },\n  data () {\n    return {\n      ref: 'scroll-ranking-board',\n\n      defaultConfig: {\n        /**\n         * @description Board data\n         * @type {Array<Object>}\n         * @default data = []\n         */\n        data: [],\n        /**\n         * @description Row num\n         * @type {Number}\n         * @default rowNum = 5\n         */\n        rowNum: 5,\n        /**\n         * @description Scroll wait time\n         * @type {Number}\n         * @default waitTime = 2000\n         */\n        waitTime: 2000,\n        /**\n         * @description Carousel type\n         * @type {String}\n         * @default carousel = 'single'\n         * @example carousel = 'single' | 'page'\n         */\n        carousel: 'single',\n        /**\n         * @description Value unit\n         * @type {String}\n         * @default unit = ''\n         * @example unit = 'ton'\n         */\n        unit: '',\n        /**\n         * @description Auto sort by value\n         * @type {Boolean}\n         * @default sort = true\n         */\n        sort: true,\n        /**\n         * @description Value formatter\n         * @type {Function}\n         * @default valueFormatter = null\n         */\n        valueFormatter: null\n      },\n\n      mergedConfig: null,\n\n      rowsData: [],\n\n      rows: [],\n\n      heights: [],\n\n      animationIndex: 0,\n\n      animationHandler: '',\n\n      updater: 0\n    }\n  },\n  watch: {\n    config () {\n      const { stopAnimation, calcData } = this\n\n      stopAnimation()\n\n      calcData()\n    }\n  },\n  methods: {\n    afterAutoResizeMixinInit () {\n      const { calcData } = this\n\n      calcData()\n    },\n    onResize () {\n      const { mergedConfig, calcHeights } = this\n\n      if (!mergedConfig) return\n\n      calcHeights(true)\n    },\n    calcData () {\n      const { mergeConfig, calcRowsData } = this\n\n      mergeConfig()\n\n      calcRowsData()\n\n      const { calcHeights } = this\n\n      calcHeights()\n\n      const { animation } = this\n\n      animation(true)\n    },\n    mergeConfig () {\n      let { config, defaultConfig } = this\n\n      this.mergedConfig = deepMerge(deepClone(defaultConfig, true), config || {})\n    },\n    calcRowsData () {\n      let { data, rowNum, sort } = this.mergedConfig\n\n      sort && data.sort(({ value: a }, { value: b }) => {\n        if (a > b) return -1\n        if (a < b) return 1\n        if (a === b) return 0\n      })\n\n      const value = data.map(({ value }) => value)\n      \n      const min = Math.min(...value) || 0\n\n      // abs of min\n      const minAbs = Math.abs(min)\n\n      const max = Math.max(...value) || 0\n\n      // abs of max\n      const maxAbs = Math.abs(max)\n\n      const total = max + minAbs\n\n      data = data.map((row, i) => ({ ...row, ranking: i + 1, percent: (row.value + minAbs) / total * 100 }))\n\n      const rowLength = data.length\n\n      if (rowLength > rowNum && rowLength < 2 * rowNum) {\n        data = [...data, ...data]\n      }\n\n      data = data.map((d, i) => ({ ...d, scroll: i }))\n\n      this.rowsData = data\n      this.rows = data\n    },\n    calcHeights (onresize = false) {\n      const { height, mergedConfig } = this\n\n      const { rowNum, data } = mergedConfig\n\n      const avgHeight = height / rowNum\n\n      this.avgHeight = avgHeight\n\n      if (!onresize) this.heights = new Array(data.length).fill(avgHeight)\n    },\n    async animation (start = false) {\n      let { avgHeight, animationIndex, mergedConfig, rowsData, animation, updater } = this\n\n      const { waitTime, carousel, rowNum } = mergedConfig\n\n      const rowLength = rowsData.length\n\n      if (rowNum >= rowLength) return\n\n      if (start) {\n        await new Promise(resolve => setTimeout(resolve, waitTime))\n        if (updater !== this.updater) return\n      }\n\n      const animationNum = carousel === 'single' ? 1 : rowNum\n\n      let rows = rowsData.slice(animationIndex)\n      rows.push(...rowsData.slice(0, animationIndex))\n\n      this.rows = rows.slice(0, rowNum + 1)\n      this.heights = new Array(rowLength).fill(avgHeight)\n\n      await new Promise(resolve => setTimeout(resolve, 300))\n      if (updater !== this.updater) return\n\n      this.heights.splice(0, animationNum, ...new Array(animationNum).fill(0))\n\n      animationIndex += animationNum\n\n      const back = animationIndex - rowLength\n      if (back >= 0) animationIndex = back\n\n      this.animationIndex = animationIndex\n      this.animationHandler = setTimeout(animation, waitTime - 300)\n    },\n    stopAnimation () {\n      const { animationHandler, updater } = this\n\n      this.updater = (updater + 1) % 999999\n\n      if (!animationHandler) return\n\n      clearTimeout(animationHandler)\n    },\n  },\n  destroyed () {\n    const { stopAnimation } = this\n\n    stopAnimation()\n  }\n}\n</script>"],"sourceRoot":""}]}